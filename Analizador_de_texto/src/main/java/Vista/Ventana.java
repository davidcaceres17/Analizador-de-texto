/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import java.awt.List;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author justo
 */
public class Ventana extends javax.swing.JFrame {
    JFileChooser seleccionar=new JFileChooser();
    File archivo;
    FileInputStream entrada;
    FileOutputStream salida;
    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents(); 
        
        
    }

    public void copiar(String copiar){
        StringSelection ss=new StringSelection(copiar);
        Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
        cb.setContents(ss, null);
    }
    
    public String pegar(){
        String resultado="";
        Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
        Transferable contenido=cb.getContents(null);
        if(contenido.isDataFlavorSupported(DataFlavor.stringFlavor)){
            try {
                resultado=(String) contenido.getTransferData(DataFlavor.stringFlavor);
            } catch (UnsupportedFlavorException | IOException ex) {
               JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        }
        return resultado;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_texto = new javax.swing.JTextArea();
        brn_procesar = new javax.swing.JButton();
        lbl_longitud = new javax.swing.JLabel();
        lbl_total_palabras = new javax.swing.JLabel();
        lbl_primer_letra = new javax.swing.JLabel();
        lbl_ultima_letra = new javax.swing.JLabel();
        lbl_letra_central = new javax.swing.JLabel();
        lbl_primer_palabra = new javax.swing.JLabel();
        lbl_palabra_central = new javax.swing.JLabel();
        lbl_ultima_palabra = new javax.swing.JLabel();
        lbl_repeticiones_a = new javax.swing.JLabel();
        lbl_repeticiones_e = new javax.swing.JLabel();
        lbl_repeticiones_i = new javax.swing.JLabel();
        lbl_repeticiones_o = new javax.swing.JLabel();
        lbl_repeticiones_u = new javax.swing.JLabel();
        lbl_par = new javax.swing.JLabel();
        lbl_impar = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_muricelago = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        item_abrir = new javax.swing.JMenuItem();
        item_guardar = new javax.swing.JMenuItem();
        item_guardar_como = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        item_copiar = new javax.swing.JMenuItem();
        item_cortar = new javax.swing.JMenuItem();
        item_pegar = new javax.swing.JMenuItem();
        item_buscar = new javax.swing.JMenuItem();
        item_reemplazar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("MANEJO DE CADENAS");

        jLabel2.setText("Ingrese un texto o abra una archivo");

        txt_texto.setColumns(20);
        txt_texto.setRows(5);
        jScrollPane1.setViewportView(txt_texto);

        brn_procesar.setText("Procesar");
        brn_procesar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brn_procesarActionPerformed(evt);
            }
        });

        lbl_longitud.setText("Longitud del texto....");

        lbl_total_palabras.setText("Total de palabras...");

        lbl_primer_letra.setText("Primer letra del texto...");

        lbl_ultima_letra.setText("Ultima letra del texto...");

        lbl_letra_central.setText("Letra central del texto...");

        lbl_primer_palabra.setText("Primer palabra...");

        lbl_palabra_central.setText("Palabra central...");

        lbl_ultima_palabra.setText("Ultima palabra...");

        lbl_repeticiones_a.setText("Repeteciones de \"A\" \"a\" ó \"á\"...");

        lbl_repeticiones_e.setText("Repeticiones de \"E\" \"e\" ó \"é\"");

        lbl_repeticiones_i.setText("Repeticiones de \"I\" \"i\" ó \"í\"");

        lbl_repeticiones_o.setText("Repeticiones de \"O\" \"o\" ó \"ó\" ");

        lbl_repeticiones_u.setText("Repeticiones de \"Ú\" \"u\" ó \"ú\"");

        lbl_par.setText("Palabras con cantidad de caracteres par:");

        lbl_impar.setText("Palabras con cantidad de caracteres impar:");

        txt_muricelago.setColumns(20);
        txt_muricelago.setRows(5);
        jScrollPane2.setViewportView(txt_muricelago);

        jLabel3.setText("TRADUCCIÓN A CLAVE MURCIELAGO");

        jMenu1.setText("Archivo");

        item_abrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        item_abrir.setText("Abrir");
        item_abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_abrirActionPerformed(evt);
            }
        });
        jMenu1.add(item_abrir);

        item_guardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        item_guardar.setText("Guardar");
        item_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_guardarActionPerformed(evt);
            }
        });
        jMenu1.add(item_guardar);

        item_guardar_como.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        item_guardar_como.setText("Guardar como");
        item_guardar_como.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_guardar_comoActionPerformed(evt);
            }
        });
        jMenu1.add(item_guardar_como);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Editar");

        item_copiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        item_copiar.setText("Copiar");
        item_copiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_copiarActionPerformed(evt);
            }
        });
        jMenu2.add(item_copiar);

        item_cortar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        item_cortar.setText("Cortar");
        item_cortar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_cortarActionPerformed(evt);
            }
        });
        jMenu2.add(item_cortar);

        item_pegar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        item_pegar.setText("Pegar");
        item_pegar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_pegarActionPerformed(evt);
            }
        });
        jMenu2.add(item_pegar);

        item_buscar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        item_buscar.setText("Buscar");
        item_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_buscarActionPerformed(evt);
            }
        });
        jMenu2.add(item_buscar);

        item_reemplazar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        item_reemplazar.setText("Reemplazar");
        item_reemplazar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_reemplazarActionPerformed(evt);
            }
        });
        jMenu2.add(item_reemplazar);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lbl_longitud)
                        .addGap(49, 378, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbl_ultima_palabra)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(189, 189, 189)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_primer_palabra)
                                    .addComponent(lbl_palabra_central)
                                    .addComponent(lbl_total_palabras)
                                    .addComponent(lbl_primer_letra)
                                    .addComponent(lbl_ultima_letra)
                                    .addComponent(lbl_letra_central))
                                .addGap(32, 32, 32)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_repeticiones_e)
                                    .addComponent(lbl_repeticiones_a)
                                    .addComponent(lbl_repeticiones_i)
                                    .addComponent(lbl_repeticiones_o)
                                    .addComponent(lbl_repeticiones_u)
                                    .addComponent(lbl_impar)
                                    .addComponent(lbl_par)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(152, 152, 152)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(51, 51, 51)
                                        .addComponent(brn_procesar)))))
                        .addGap(0, 113, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(brn_procesar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_longitud)
                    .addComponent(lbl_repeticiones_a))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_total_palabras)
                    .addComponent(lbl_repeticiones_e))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_primer_letra)
                    .addComponent(lbl_repeticiones_i))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_ultima_letra)
                    .addComponent(lbl_repeticiones_o))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_letra_central)
                    .addComponent(lbl_repeticiones_u))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_primer_palabra)
                    .addComponent(lbl_par))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_palabra_central)
                    .addComponent(lbl_impar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_ultima_palabra)
                .addGap(16, 16, 16)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void brn_procesarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brn_procesarActionPerformed
        String cadena_completa;
        cadena_completa = txt_texto.getText();
        //muchis aqui obtengo la longitud del texto
        lbl_longitud.setText("Longitud del texto... " + cadena_completa.length());
        //no pos aqui cuento las palabras para saber el total de las paabras 
        int contador = 1, pos;
        cadena_completa = cadena_completa.trim(); //eliminar los posibles espacios en blanco al principio y al final                              
        if (cadena_completa.isEmpty()) { //si la cadena está vacía
            contador = 0;
        } else {
                pos = cadena_completa.indexOf(" "); //se busca el primer espacio en blanco
                while (pos != -1) {   //mientras que se encuentre un espacio en blanco
                       contador++;    //se cuenta una palabra
                       pos = cadena_completa.indexOf(" ", pos + 1); //se busca el siguiente espacio en blanco                       
                }                                     //a continuación del actual
        }
        lbl_total_palabras.setText("Total de palabras..." + contador);  
        
        //primer letra del texto
        String sPalabra;
        StringTokenizer stPalabras = new StringTokenizer(cadena_completa);
        sPalabra = stPalabras.nextToken();
        lbl_primer_letra.setText("Primer letra del texto..." + sPalabra.substring(0,1)); 
        
        
        //ultima letra del texto
        lbl_ultima_letra.setText("Utima letra del texto..." + cadena_completa.substring(cadena_completa.length() - 1)); 
  
        //System.out.println(operacion2);
        //Obteniendo la letra central del texto
        lbl_letra_central.setText("Letra central del texto..." + cadena_completa.charAt(cadena_completa.length() / 2));
        
        //Obtener la primer palabra del texto
        StringTokenizer tokens = new StringTokenizer(cadena_completa);
        String primeraPalabra = tokens.nextToken();
        lbl_primer_palabra.setText("Primer palabra..." +primeraPalabra);
        
        //Ultima palabra
        String lastWord = cadena_completa.substring(cadena_completa.lastIndexOf(" ")+1);
        lbl_ultima_palabra.setText("Ultima palabra..." + lastWord);
        
        String frase = txt_texto.getText();
        Clave_murcielagoq(frase);
        Palabra_central(cadena_completa,contador);
        Repeticiones_letra_a(cadena_completa);
        Repeticiones_letra_e(cadena_completa);
        Repeticiones_letra_i(cadena_completa);
        Repeticiones_letra_o(cadena_completa);
        Repeticiones_letra_u(cadena_completa);
        Palabras_pares_impares(cadena_completa,contador);
        
    }//GEN-LAST:event_brn_procesarActionPerformed

        ArrayList<String> cadenas = new ArrayList<String>();
        ArrayList<String> palabras = new ArrayList<String>();
        ArrayList<String> encontradas = new ArrayList<String>();
        Scanner sc = new Scanner(System.in);
        int nencontradas = 0;
    private void item_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_buscarActionPerformed
        
        String cadena = txt_texto.getText();
        String palabra = JOptionPane.showInputDialog("Introduzca la palabra a buscar");
        System.out.println(palabra);
        System.out.println(cadena);
        String arreglo[] = cadena.split(" ");
        File archivo;
        FileWriter escribir;
        PrintWriter linea;
        archivo = new File("buscar.txt");

        for(int i=0; i < arreglo.length;i++){
            
            if(arreglo[i].equals(palabra)){
                //System.out.println("<<"+arreglo[i]+">>");
                arreglo[i] = "<<"+arreglo[i]+">>";
               
            }
            //-----------------------------
        //Escribiendo en el historial
            
            if(!archivo.exists()){
                try {
                    archivo.createNewFile();
                    escribir = new FileWriter(archivo,true);
                    linea = new PrintWriter(escribir);
                    linea.println(arreglo[i] + " ");
                    linea.close();
                    escribir.close();
                } catch (IOException ex) {
                    Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                try {

                    escribir = new FileWriter(archivo,true);
                    linea = new PrintWriter(escribir);
                    linea.println(arreglo[i] + " ");
                    linea.close();
                    escribir.close();
                } catch (IOException ex) {
                    Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        String s1 = leertxt("buscar.txt");
        
        txt_texto.setText(s1);
    }//GEN-LAST:event_item_buscarActionPerformed


    public String leertxt(String direccion){
        String texto = "";
        
        try{
            BufferedReader bf = new BufferedReader(new FileReader(direccion));
            String temp = "";
            String salto = "\r\n";
            String bfRead;
            while((bfRead = bf.readLine()) != null){
                temp = temp + bfRead;
                temp = temp + salto;
            }
            
            
            texto = temp;
        }catch(Exception e){
            System.err.println("No se encontro archivo");
        }
        
        return texto;
    }
    
   
 
    public boolean busqueda() {
        System.out.format("entro a busqueda");
        String patron = String.join("|", palabras);
        for (String cadena: cadenas) {
            Pattern pattern = Pattern.compile("\\b(" + patron + ")\\b", Pattern.CASE_INSENSITIVE);
            Matcher matcher = pattern.matcher(cadena);
            String cadena_modif = "";
            while (matcher.find()) {
                nencontradas++;
                cadena_modif = cadena.replaceAll("\\b(?i)(" + matcher.group(1) + ")\\b", "<<$1>>");
            }
            if( ! cadena_modif.isEmpty()) encontradas.add(cadena_modif);
        }
        if (encontradas.size() > 0) return true;
        return false;
    }
    
    private void item_abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_abrirActionPerformed
        if(seleccionar.showDialog(null, "Abrir")==JFileChooser.APPROVE_OPTION){
            archivo=seleccionar.getSelectedFile();
            if(archivo.canRead()){
                if(archivo.getName().endsWith("txt")){
                    String documento=AbrirArchivo(archivo);
                    txt_texto.setText(documento);
                }else{
                    JOptionPane.showMessageDialog(null, "Archivo No Compatible");
                }
            }
        }
    }//GEN-LAST:event_item_abrirActionPerformed

    private void item_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_guardarActionPerformed
        archivo=seleccionar.getSelectedFile();
            if(archivo.getName().endsWith("txt")){
                String Documento=txt_texto.getText();
                String mensaje=GuardarArchivo(archivo,Documento);
                if(mensaje!=null){
                    JOptionPane.showMessageDialog(null, mensaje);
                }else{
                JOptionPane.showMessageDialog(null, "Archivo No Compatible");
                }
            }else{
                JOptionPane.showMessageDialog(null, "Guardar Documento de Texto");
            }
    }//GEN-LAST:event_item_guardarActionPerformed

    private void item_guardar_comoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_guardar_comoActionPerformed
        if (seleccionar.showDialog(null, "Guardar")== JFileChooser.APPROVE_OPTION){
        archivo=seleccionar.getSelectedFile();
        if (archivo.getName().endsWith("txt")){
            String Documento= txt_texto.getText();
            String mensaje=GuardarArchivo(archivo,Documento);
            if (mensaje!=null){
                JOptionPane.showMessageDialog(null,mensaje);
            }else{
               JOptionPane.showMessageDialog(null,"ARCHIVO NO GUARDADO");
            
            }
        } else {
           JOptionPane.showMessageDialog(null,"GUARDADAR DOCUMENTO DE TEXTO");
             
        }
    }
        
        
    
    }//GEN-LAST:event_item_guardar_comoActionPerformed

    private void item_copiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_copiarActionPerformed
        copiar(txt_texto.getText());
    }//GEN-LAST:event_item_copiarActionPerformed

    private void item_cortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_cortarActionPerformed
        copiar(txt_texto.getText());
        txt_texto.setText("");
    }//GEN-LAST:event_item_cortarActionPerformed

    private void item_pegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_pegarActionPerformed
        txt_texto.setText(pegar());
    }//GEN-LAST:event_item_pegarActionPerformed

    private void item_reemplazarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_reemplazarActionPerformed
        String cadena = txt_texto.getText();
        String palabra = JOptionPane.showInputDialog("Introduzca la palabra a buscr para reemplazar");
        String reemplazar = JOptionPane.showInputDialog("Introduzca la palabra que la reemplazar");
        String arreglo[] = cadena.split(" ");
        File archivo;
        FileWriter escribir;
        PrintWriter linea;
        archivo = new File("reemplazar.txt");

        for(int i=0; i < arreglo.length;i++){
            
            if(arreglo[i].equals(palabra)){
                //System.out.println("<<"+arreglo[i]+">>");
                arreglo[i] = reemplazar;
               
            }
            //-----------------------------
        //Escribiendo en el historial
            
            if(!archivo.exists()){
                try {
                    archivo.createNewFile();
                    escribir = new FileWriter(archivo,true);
                    linea = new PrintWriter(escribir);
                    linea.println(arreglo[i] + " ");
                    linea.close();
                    escribir.close();
                } catch (IOException ex) {
                    Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                try {

                    escribir = new FileWriter(archivo,true);
                    linea = new PrintWriter(escribir);
                    linea.println(arreglo[i] + " ");
                    linea.close();
                    escribir.close();
                } catch (IOException ex) {
                    Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        String s1 = leertxt("reemplazar.txt");
        
        txt_texto.setText(s1);
    }//GEN-LAST:event_item_reemplazarActionPerformed

    public String AbrirArchivo (File archivo){
        String documento="";
            try{
                entrada=new FileInputStream(archivo);
                int ascci;
                while((ascci=entrada.read())!=-1){
                    char caracter=(char)ascci;
                    documento+=caracter;
                }
            }catch(IOException e){
            }
            return documento;    
        }

    public String GuardarArchivo (File archivo,String documento){
        String mensaje=null;
        try{
            salida=new FileOutputStream(archivo);
            byte[]bytxt=documento.getBytes();
            salida.write(bytxt);
            mensaje="Archivo Guardado";
        }catch(IOException e){
        }
        return mensaje;
    }
    
    
    
    public void Palabra_central(String cadena, int contador){    
        String[] words = cadena.split("\\s+");
        int mitad = contador/2;
        if (contador%2!=0){
            mitad = mitad + 1;
        }
        int contador2 = mitad - 1;
        for (int i = 0; i <= mitad; i++) {
            if(i == contador2){
                words[i] = words[i].replaceAll("[^\\w]", "");
                lbl_palabra_central.setText("Palabra central..." + words[i]);
            }
        }
        
    }
    
    public void Repeticiones_letra_a(String cadena){
        int contadorVocales = 0;
        char letraArray[] = cadena.toCharArray();
        char letra = letraArray[0];
        int contadorLetraRepetida = 0;

        for(int i=0; i<cadena.length(); i++){
            switch(cadena.charAt(i)){
                case 'a': case 'A': case 'á':
                    contadorVocales++;
                    break;
            }
        }
        lbl_repeticiones_a.setText("Repeticiones de 'A' 'a' 'á'..." + contadorVocales);
    }
    
    public void Repeticiones_letra_e(String cadena){
        int contadorVocales = 0;
        char letraArray[] = cadena.toCharArray();
        char letra = letraArray[0];
        int contadorLetraRepetida = 0;

        for(int i=0; i<cadena.length(); i++){
            switch(cadena.charAt(i)){
                case 'e': case 'E': case 'é':
                    contadorVocales++;
                    break;
            }
        }
        lbl_repeticiones_e.setText("Repeticiones de 'E' 'e' 'é'..." + contadorVocales);
    }
    
    public void Repeticiones_letra_i(String cadena){
        int contadorVocales = 0;
        char letraArray[] = cadena.toCharArray();
        char letra = letraArray[0];
        int contadorLetraRepetida = 0;

        for(int i=0; i<cadena.length(); i++){
            switch(cadena.charAt(i)){
                case 'i': case 'I': case 'í':
                    contadorVocales++;
                    break;
            }
        }
        lbl_repeticiones_i.setText("Repeticiones de 'I' 'i' 'í'..." + contadorVocales);
    }
    
    public void Repeticiones_letra_o(String cadena){
        int contadorVocales = 0;
        char letraArray[] = cadena.toCharArray();
        char letra = letraArray[0];
        int contadorLetraRepetida = 0;

        for(int i=0; i<cadena.length(); i++){
            switch(cadena.charAt(i)){
                case 'o': case 'O': case 'ó':
                    contadorVocales++;
                    break;
            }
        }
        lbl_repeticiones_o.setText("Repeticiones de 'O' 'o' 'ó'..." + contadorVocales);
    }
    
    public void Repeticiones_letra_u(String cadena){
        int contadorVocales = 0;
        char letraArray[] = cadena.toCharArray();
        char letra = letraArray[0];
        int contadorLetraRepetida = 0;

        for(int i=0; i<cadena.length(); i++){
            switch(cadena.charAt(i)){
                case 'u': case 'Ú': case 'ú':
                    contadorVocales++;
                    break;
            }
        }
        lbl_repeticiones_u.setText("Repeticiones de 'U' 'u' 'ú'..." + contadorVocales);
    }
    
    public void Palabras_pares_impares(String cadena, int contador){
        String[] words = cadena.split("\\s+");
        int par=0;
        int impar=0;
        for (int i = 0; i <= contador; i++) {
                words[i] = words[i].replaceAll("[^\\w]", "");
                int par_impar = words[i].length();
                System.out.println(par_impar);
                if (par_impar % 2 == 0){
                    impar += 1;
                    lbl_par.setText("Palabras con cantidad de caracteres par:" + impar);
                    
                }else{
                    par += 1;
                    lbl_impar.setText("Palabras con cantidad de caracteres impar:" + par);
                }
                
        }
        
        
    }
    
    public void Clave_murcielagoq(String frase){
        Scanner sc = new Scanner(System.in);
        char[] cadena = new char[900];
        
        //Sentencia for aninidada de if en la cual comprobaremos la cadena de texto enviada!
        for(int i=0; i<frase.length(); i++)
        {
            
        //Con estos if comprobamos las letras que se ingresan
        if(frase.charAt(i)=='M' || frase.charAt(i)=='m')
        {
            cadena[i] = '0';
        //System.out.println("0");
        }
        else if(frase.charAt(i)=='U' || frase.charAt(i)=='u')
        {
            cadena[i] = '1';
        //System.out.println("1");
        }
        else if(frase.charAt(i)=='R' || frase.charAt(i)=='r')
        {
            cadena[i] = '2';
        //System.out.println("2");
        }
        else if(frase.charAt(i)=='C' || frase.charAt(i)=='c')
        {
            cadena[i] = '3';
        //System.out.println("3");
        }
        else if(frase.charAt(i)=='I' || frase.charAt(i)=='i')
        {
            cadena[i] = '4';
        //System.out.println("4");
        }
        else if(frase.charAt(i)=='E' || frase.charAt(i)=='e')
        {
            cadena[i] = '5';
        //System.out.println("5");
        }
        else if(frase.charAt(i)=='L' || frase.charAt(i)=='l')
        {
            cadena[i] = '6';
        //System.out.println("6");
        }
        else if(frase.charAt(i)=='A' || frase.charAt(i)=='a')
        {
            cadena[i] = '7';
        //System.out.println("7");
        }
        else if(frase.charAt(i)=='G' || frase.charAt(i)=='g')
        {
            cadena[i] = '8';
        //System.out.println("8");
        }
        else if(frase.charAt(i)=='O' || frase.charAt(i)=='o')
        {
            cadena[i] = '9';
        //System.out.println("9");
        }
        else
        {
            cadena[i] = frase.charAt(i);
        }
        String resultado = String.valueOf(cadena);
        //System.out.println(cadena);
        //System.out.println(resultado);
        txt_muricelago.setText(resultado);
      
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton brn_procesar;
    private javax.swing.JMenuItem item_abrir;
    private javax.swing.JMenuItem item_buscar;
    private javax.swing.JMenuItem item_copiar;
    private javax.swing.JMenuItem item_cortar;
    private javax.swing.JMenuItem item_guardar;
    private javax.swing.JMenuItem item_guardar_como;
    private javax.swing.JMenuItem item_pegar;
    private javax.swing.JMenuItem item_reemplazar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl_impar;
    private javax.swing.JLabel lbl_letra_central;
    private javax.swing.JLabel lbl_longitud;
    private javax.swing.JLabel lbl_palabra_central;
    private javax.swing.JLabel lbl_par;
    private javax.swing.JLabel lbl_primer_letra;
    private javax.swing.JLabel lbl_primer_palabra;
    private javax.swing.JLabel lbl_repeticiones_a;
    private javax.swing.JLabel lbl_repeticiones_e;
    private javax.swing.JLabel lbl_repeticiones_i;
    private javax.swing.JLabel lbl_repeticiones_o;
    private javax.swing.JLabel lbl_repeticiones_u;
    private javax.swing.JLabel lbl_total_palabras;
    private javax.swing.JLabel lbl_ultima_letra;
    private javax.swing.JLabel lbl_ultima_palabra;
    private javax.swing.JTextArea txt_muricelago;
    private javax.swing.JTextArea txt_texto;
    // End of variables declaration//GEN-END:variables
}
